# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper.rb"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
require "bundler"
Bundler.require(:default, :development)

require "savon/mock/spec_helper"

if ENV['COVERAGE']
  require 'simplecov'
  SimpleCov.start
else
  require 'coveralls'
  Coveralls.wear!
end

RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus
  config.mock_with :rspec 
end

def f method, response
  File.read File.join(File.expand_path("../fixtures", __FILE__), method.to_s, "#{response.to_s}.xml")
end

require 'profitbricks'

HTTPI.log = false

Profitbricks.configure do |config|
  config.username = "none"
  config.password = "none"
  config.polling_interval = 0.1 
end


require "httpi"

# FIXME trying to debug travis-ci build issues
module Wasabi
  class Resolver
    private
    def load_from_remote
      request.url = document
      response = HTTPI.get(request)
      raise HTTPError.new("Error: #{response.code}", response) if response.error?

      response.body
    end
  end
end
$once = false
require 'pp'
module Savon
  class Operation
    def self.ensure_exists!(operation_name, wsdl)
      if $once == false
        pp wsdl.soap_actions
        pp wsdl.operations
        $once = true
      end
      unless wsdl.soap_actions.include? operation_name
        raise UnknownOperationError, "Unable to find SOAP operation: #{operation_name.inspect}\n" \
                                     "Operations provided by your service: #{wsdl.soap_actions.inspect}"
      end
    end

  end
end
require "nokogiri"
require "wasabi/resolver"
require "wasabi/parser"

module Wasabi

  # = Wasabi::Document
  #
  # Represents a WSDL document.
  class Document
  private
    # Parses the WSDL document and returns <tt>Wasabi::Parser</tt>.
    def parse
      pp xml
      parser = Parser.new Nokogiri::XML(xml)
      pp parser.parse
      parser
    end
  end
end
